library(cowplot)
library(pheatmap)
library(splots)
library(patchwork)
library(synergyfinder)
library(ggsignif)
library(broom)
library(ggrepel)
library(readxl)
library(platetools)
library(PharmacoGx)
#library(ggridges)
library(reshape2)
library(synergyfinder)
tidy_synergy = function(df, me){ lapply(as.list(me), function(m, f = df){
#hacky way of ignoring cases in which the synergy scores could not be calculated
return(tryCatch(f %>%
ReshapeData(., data.type = "viability") %>%
#PlotDoseResponse() %>%
CalculateSynergy(method = m, correction = TRUE) %>%
tibble(BlockID = .$drug.pairs %>% simplify() %>% .[4],
method = .$method,
score_average = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% mean(),
score_sd = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% sd()) %>%
select(BlockID, method, score_average, score_sd) %>% distinct(),
error=function(e) NULL))}
) %>% bind_rows()
#PlotSynergy(type = "all")
}
ctg_data <- tibble(files = list.files(here("data/ctg_data/validation"), pattern = ".TXT"),
path = list.files(here("data/ctg_data/validation"),
pattern = ".TXT",
full.names = TRUE)) %>%
mutate(data = map(path, ~ read_delim(.x,
"\t",
escape_double = FALSE,
col_names = FALSE,
trim_ws = TRUE) %>%
magrittr::set_colnames(c('name', 'well', 'pcount')))) %>%
#### Formatting columns
separate(files, c("date", "operator", "mithras", "experiment_id"), sep = "_", remove = FALSE) %>%
mutate(experiment_id = substr(experiment_id, 1, nchar(experiment_id)-4)) %>%
# I renamed one file that had irregular name patterns: **mv 181030_AF_M2_D105T01V007L13.TXT 181030_AF_M2_D105T01V006L13.TX**.
unnest(data) %>%
mutate(row = substr(well, 1,1),
col = substr(well, 2,3),
col_num = as.numeric(col)) %>%
#### Adding annotation column
left_join(., read_csv(here("anno/combi_validation_robot.csv")) %>%
rename(well = destination.well) %>%
select(drug_pair_conc, well) %>%
separate(well, c("row", "col"), sep = 1, remove = FALSE) %>%
distinct() %>%
separate(drug_pair_conc, c("drug_1", "drug_2", "conc_1", "conc_2"),
remove = FALSE, sep = "_")) %>%
#### Adding addtional features
mutate(id = experiment_id) %>%
mutate(row_num = match(row, LETTERS[1:26])) %>%
mutate(line = substr(id, 1, 7),
drug = paste0(drug_1, "_", drug_2)) %>%
mutate(plate_no = substr(id, 9, nchar(id)-3) %>% as.numeric())
ctg_data <- ctg_data %>%
left_join(., ctg_data %>%
dplyr::select(line, plate_no) %>%
distinct() %>%
group_by(line) %>%
mutate(replicate = if_else(plate_no == min(plate_no), 1,2)))
pdf(file = "overview_valid_raw.pdf", width = 15, height = 4, compress = FALSE)
ctg_data %>%
select(id, pcount) %>% arrange(id) %>% split(., .$id) %>% lapply(., function(f) f$pcount %>% as.vector) %>%
plotScreen(., 10, do.names = TRUE, do.legend = FALSE)
dev.off()
ctg_data %>%
select(id, pcount) %>% arrange(id) %>% split(., .$id) %>% lapply(., function(f) f$pcount %>% as.vector) %>%
plotScreen(., 10, do.names = TRUE, do.legend = FALSE)
ctg_data %>% ggplot(aes(row_num, pcount)) + geom_point() +
geom_smooth() +
facet_wrap(~id, nrow = 4) + theme_bw() + ggtitle("Spatial effects of rows")
#next figure
ctg_data %>% ggplot(aes(col_num, pcount)) + geom_point() +
geom_smooth() +
facet_wrap(~id, nrow = 4) + theme_bw() + ggtitle("Spatial effects of columns")
ctg_loess <- ctg_data %>% dplyr::select(row_num, col_num, pcount, id) %>%
# na values
drop_na() %>%
#set the ctrl column 13 to NA
#mutate(pcount = ifelse(col_num == 13, NA, pcount)) %>%
split(.$id) %>% lapply(function(s){
## loess fit. family is 'symmetric' to be robust to outliers
fit <- loess(pcount ~ row_num + col_num, data=s, family='symmetric')
## apply normalization
tibble(norm_fac = fit$fitted) %>% cbind(s %>% drop_na(),.) %>%
mutate(pcount_norm = pcount - (norm_fac - median(norm_fac)))
}) %>% bind_rows() %>% full_join(ctg_data)
ctg_loess %>% ggplot(aes(row_num, pcount_norm)) + geom_point() +
geom_smooth() +
facet_wrap(~id, nrow = 4) + theme_bw() + ggtitle("Spatial effects of rows")
#next figure
ctg_loess %>% ggplot(aes(col_num, pcount_norm)) + geom_point() +
geom_smooth() +
facet_wrap(~id, nrow = 4) + theme_bw() + ggtitle("Spatial effects of columns")
pdf(file = "overview_valid_norm.pdf", width = 15, height = 4, compress = FALSE)
ctg_loess %>%
select(id, pcount_norm) %>% arrange(id) %>% split(., .$id) %>% lapply(., function(f) f$pcount_norm %>% as.vector) %>%
plotScreen(., 10, do.names = TRUE, do.legend = FALSE)
dev.off()
ctg_loess %>%
select(id, pcount_norm) %>% arrange(id) %>% split(., .$id) %>% lapply(., function(f) f$pcount_norm %>% as.vector) %>%
plotScreen(., 10, do.names = TRUE, do.legend = FALSE)
coi <- c("DMSO")
ctg_loess %>%
filter(drug_1 %in% coi & drug_2 %in% coi) %>%
ggplot(aes(line, pcount_norm, color = date)) +
#geom_violin(aes(group = drug)) +
geom_jitter(alpha = 0.7, width = 0.1) +
#geom_boxplot(width = 30) +
#facet_wrap(~line) +
theme_cowplot() +
coord_flip()
# ctg_loess %>%
#   mutate(line_date_exp = paste0(line, "_", date)) %>%
#   filter(drug %in% coi) %>%
#   filter(combination == TRUE) %>%
#   ggplot(aes(id, pcount_norm, color = drug)) +
#   #geom_violin(aes(group = drug)) +
#   geom_boxplot(alpha = 0.7) +
#   #facet_grid(line_date_exp ~ Library) +
#   #facet_wrap(~line) +
#   theme_classic()
ctg_loess %>%
ggplot(aes(pcount_norm, fill = date)) +
#geom_violin(aes(group = drug)) +
geom_histogram(position="identity", alpha = 0.4) +
#geom_boxplot(width = 30) +
facet_wrap(~line) +
theme_cowplot() +
geom_vline(xintercept = 0)
coi <- c("Docetaxel_DMSO", "DMSO_DMSO")
ctg_loess %>%
filter(drug %in% coi) %>%
filter(conc_1 == 1) %>%
ggplot(aes(drug_pair_conc, pcount_norm)) +
geom_point() +
facet_wrap(~ line) +
theme_cowplot()
coi <- c("Docetaxel_DMSO", "DMSO_DMSO")
z_df <- ctg_loess %>%
filter(drug %in% coi) %>%
filter(!(drug == coi[1] & conc_1 %in% c(3:5))) %>%
group_by(id, drug, line, date) %>%
summarise(sd = sd(pcount_norm, na.rm = TRUE),
mean = mean(pcount_norm, na.rm = TRUE)) %>%
group_by(id, line, date) %>%
summarise(zfactor = 1-((3*sum(sd))/abs(range(mean)[1]-range(mean)[2]))) %>%
mutate(qc = if_else(zfactor < 0.25, FALSE, TRUE))
z_df %>%
arrange(zfactor) %>%
ungroup() %>%
mutate(id = factor(id, levels = id)) %>%
ggplot(aes(zfactor, id)) +
geom_point(aes(color =  line)) +
theme_cowplot()
# z_df_anno <- z_df %>% ungroup%>% mutate(id = paste0(id, "_", combination)) %>%
#   dplyr::select(-experiment, -zfactor) %>%
#   as.data.frame() %>%
#   remove_rownames() %>%
#   column_to_rownames("id")
#
# z_df %>% ungroup%>% mutate(id = paste0(id, "_", combination)) %>% dplyr::select(id, zfactor) %>%
#   arrange(zfactor) %>%
#   as.data.frame() %>%
#   remove_rownames() %>%
#   column_to_rownames("id") %>%
#   pheatmap(., cluster_cols = FALSE, annotation_row =  z_df_anno)
r <- ctg_loess %>%
mutate(ctrl = ifelse(drug == "DMSO", "negative", "none")) %>%
mutate(ctrl = ifelse(drug == "Docetaxel_DMSO" & conc_1 %in% c(1:2), "positive", ctrl)) %>%
#filter(drug %in% coi) %>%
unite(id, c("line", "well")) %>%
dplyr::select(id, pcount_norm, replicate) %>%
spread(replicate, pcount_norm) %>%
rename(rep1 = `1`) %>%
rename(rep2 = `2`) %>%
dplyr::select(rep1, rep2) %>%
as.matrix() %>%
cor() %>%
.["rep1", "rep2"]
ctg_loess %>%
mutate(ctrl = ifelse(drug == "DMSO", "negative", "none")) %>%
mutate(ctrl = ifelse(drug == "Docetaxel_DMSO" & conc_1 %in% c(1:2), "positive", ctrl)) %>%
#filter(drug %in% coi) %>%
unite(id, c("line", "well")) %>%
dplyr::select(id, pcount_norm, replicate) %>%
spread(replicate, pcount_norm) %>%
rename(rep1 = `1`) %>%
rename(rep2 = `2`) %>%
ggplot(aes(rep1, rep2)) +
geom_point(alpha = 0.2) +
#geom_point(alpha = 0.2, aes(color = ctrl)) +
#scale_color_manual(values=c("#E69F00", "#999999", "#56B4E9")) +
geom_abline(intercept = 0, slope = 1) +
#geom_hline(yintercept = 1) +
theme_classic() +
ggtitle(paste0("r (pearson) = ", r %>% round(2))) +
xlab("replicate 1") +
ylab("replicate 2") +
scale_y_continuous(breaks = c(0, 250000, 500000, 750000)) +
coord_fixed() +
ggsave("pearson_raw_valid.pdf", width = 4, height = 4)
ctg_norm <- ctg_loess %>%
left_join(., ctg_loess %>%
filter(drug == "DMSO_DMSO") %>%
group_by(id) %>%
summarise(dmso_solo_id = mean(pcount_norm))) %>%
mutate(viability = pcount_norm/dmso_solo_id) %>%
#I crop the minimal viability to be zero
mutate(viability_uncropped = viability) %>%
mutate(viability = if_else(viability < 0, 0, viability))
r <- ctg_norm %>%
mutate(ctrl = ifelse(drug == "DMSO_DMSO", "negative", "none")) %>%
mutate(ctrl = ifelse(drug == "Docetaxel_DMSO" & conc_1 %in% c(1:2), "positive", ctrl)) %>%
#filter(drug %in% coi) %>%
unite(id, c("line", "well")) %>%
dplyr::select(id, viability, replicate) %>%
spread(replicate, viability) %>%
rename(rep1 = `1`) %>%
rename(rep2 = `2`) %>%
dplyr::select(rep1, rep2) %>%
as.matrix() %>%
cor() %>%
.["rep1", "rep2"]
ctg_norm %>%
mutate(ctrl = ifelse(drug == "DMSO", "negative", "none")) %>%
mutate(ctrl = ifelse(drug == "Docetaxel_DMSO" & conc_1 %in% c(1:2), "positive", ctrl)) %>%
#filter(drug %in% coi) %>%
unite(id, c("line", "well")) %>%
dplyr::select(id, viability_uncropped, replicate) %>%
spread(replicate, viability_uncropped) %>%
rename(rep1 = `1`) %>%
rename(rep2 = `2`) %>%
ggplot(aes(rep1, rep2)) +
geom_point(alpha = 0.2) +
#geom_point(alpha = 0.2, aes(color = ctrl)) +
#scale_color_manual(values=c("#E69F00", "#999999", "#56B4E9")) +
geom_abline(intercept = 0, slope = 1) +
#geom_hline(yintercept = 1) +
theme_classic() +
ggtitle(paste0("r (pearson) = ", r %>% round(2))) +
xlab("replicate 1") +
ylab("replicate 2") +
scale_y_continuous(breaks = c(0, 0.5, 1, 1.5,2)) +
scale_x_continuous(breaks = c(0, 0.5, 1, 1.5,2)) +
geom_hline(yintercept = 1) +
geom_vline(xintercept = 1) +
coord_fixed() +
ggsave("pearson_norm_valid.pdf", width = 4, height = 4)
ctg_norm %>%
dplyr::select(id, viability, well) %>%
spread(id, viability) %>%
dplyr::select(-well) %>%
as.matrix() %>%
cor() %>%
pheatmap::pheatmap()
df <- ctg_norm
#not a universal function
syn_table <- df %>%
#filter(drug != "DMSO_DMSO") %>%
#filter(drug_1 != "DMSO") %>%
#filter(drug_2 != "DMSO") %>%
rename(rv = viability) %>%
#setup the easy stuff
dplyr::transmute(
BlockID = paste(drug, sep = "_"),
Response = rv*100,
Replicate = replicate,
DrugRow = drug_1,
DrugCol = drug_2,
#build matrix
Row = ifelse(drug_1 != "DMSO", as.numeric(conc_1), 6),
Col = ifelse(drug_2 != "DMSO", as.numeric(conc_2), 6),
#define concentrations
ConcRow = 10/(5^(as.numeric(conc_1)-1)),
ConcCol = 10/(5^(as.numeric(conc_2)-1)),
ConcRow = ifelse(drug_1 != "DMSO", ConcRow, 0),
ConcCol = ifelse(drug_2 != "DMSO", ConcCol, 0),
ConcUnit = "uM",
line = line
) %>%  arrange(BlockID, Replicate, Row)
#Next I add the DMSO controls for the query drug concentrations
syn_table_p2 <- rbind(syn_table %>% filter(DrugCol != "DMSO"),
syn_table %>% filter(DrugCol == "DMSO") %>%
select(-BlockID)  %>%
mutate(BlockID = map(DrugRow , ~ syn_table %>%
filter(DrugCol != "DMSO" & grepl(BlockID, pattern = .x)) %>%
distinct() %>%
dplyr::select(BlockID))) %>% unnest() %>% distinct(),
syn_table %>% filter(BlockID == "DMSO_DMSO") %>%
select(-BlockID)  %>%
mutate(BlockID = map(DrugRow , ~ syn_table %>%
filter(DrugCol != "DMSO" & DrugRow != "DMSO") %>%
distinct() %>%
dplyr::select(BlockID))) %>% unnest() %>% distinct()
)
syn_table <- syn_table_p2 %>%
group_by(BlockID, Replicate, DrugRow,
DrugCol, Row, Col, ConcRow, ConcCol, ConcUnit, line) %>%
summarise(Response = mean(Response)) %>%
# they changed the API
rename(block_id = BlockID,
drug_row = DrugRow,
drug_col = DrugCol,
response = Response,
conc_r = ConcRow,
conc_c = ConcCol,
conc_r_unit = ConcUnit,
replicate = Replicate) %>%
mutate(conc_c_unit = conc_r_unit)
tmp <- syn_table %>% filter(block_id == "Everolimus_AZD5363", line == "D013T01", replicate == 1)
tmp
syn_scores <- syn_table %>%  group_by(line, replicate , block_id) %>%
do(tidy_synergy(df = ., me = c("ZIP", "HSA", "Bliss", "Loewe"))) %>%
ungroup() %>%
#complete the df for scores that could not be calculated
mutate(method = as.factor(method),
line = as.factor(line)) %>%
complete(block_id, method, replicate, line) %>%
mutate(score_average = ifelse(is.nan(score_average), NA, score_average))
syn_scores <- syn_table %>%  group_by(line, replicate , block_id) %>%
do(tidy_synergy(df = ., me = c("ZIP", "HSA", "Bliss", "Loewe"))) %>%
ungroup()
save(syn_scores, file = "syn_scores_targeted_complete_valid.Rdata")
syn_scores
f <- syn_table %>% filter(block_id == "Everolimus_AZD5363", line == "D013T01", replicate == 1)
f
lapply(as.list(me), function(m, f = df){
#hacky way of ignoring cases in which the synergy scores could not be calculated
return(tryCatch(f %>%
ReshapeData(., data.type = "viability") %>%
#PlotDoseResponse() %>%
CalculateSynergy(method = m) %>% #, correction = TRUE
tibble(BlockID = .$drug.pairs %>% simplify() %>% .[4],
method = .$method,
score_average = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% mean(),
score_sd = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% sd()) %>%
select(BlockID, method, score_average, score_sd) %>% distinct(),
error=function(e) NULL))}
) %>% bind_rows()
me
m = me[1]
f <- syn_table %>% filter(block_id == "Everolimus_AZD5363", line == "D013T01", replicate == 1)
# toruble shooting
me = c("ZIP", "HSA", "Bliss", "Loewe")
m = me[1]
f
lapply(as.list(me), function(m, f = df){
#hacky way of ignoring cases in which the synergy scores could not be calculated
return(tryCatch(f %>%
ReshapeData(., data.type = "viability") %>%
#PlotDoseResponse() %>%
CalculateSynergy(method = m) %>% #, correction = TRUE
tibble(BlockID = .$drug.pairs %>% simplify() %>% .[4],
method = .$method,
score_average = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% mean(),
score_sd = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% sd()) %>%
select(BlockID, method, score_average, score_sd) %>% distinct(),
error=function(e) NULL))}
) %>% bind_rows()
lapply(as.list(me), function(m, f = df){
#hacky way of ignoring cases in which the synergy scores could not be calculated
return(tryCatch(f %>%
ReshapeData(., data.type = "viability") %>%
#PlotDoseResponse() %>%
CalculateSynergy(method = m) %>% #, correction = TRUE
tibble(BlockID = .$drug.pairs %>% simplify() %>% .[4],
method = .$method,
score_average = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% mean(),
score_sd = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% sd()) %>%
select(BlockID, method, score_average, score_sd) %>% distinct(),
error=function(e) NULL))}
) %>% bind_rows()
f %>%
ReshapeData(., data.type = "viability") %>%
#PlotDoseResponse() %>%
CalculateSynergy(method = m) %>% #, correction = TRUE
tibble(BlockID = .$drug.pairs %>% simplify() %>% .[4],
method = .$method,
score_average = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% mean(),
score_sd = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% sd()) %>%
select(BlockID, method, score_average, score_sd) %>% distinct(),
error=function(e) NULL))
f %>%
ReshapeData(., data.type = "viability") %>%
#PlotDoseResponse() %>%
CalculateSynergy(method = m) %>% #, correction = TRUE
tibble(BlockID = .$drug.pairs %>% simplify() %>% .[4],
method = .$method,
score_average = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% mean(),
score_sd = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% sd()) %>%
select(BlockID, method, score_average, score_sd) %>% distinct()
lapply(as.list(me), function(m, f = df){
#hacky way of ignoring cases in which the synergy scores could not be calculated
return(
#tryCatch(
f %>%
ReshapeData(., data.type = "viability") %>%
#PlotDoseResponse() %>%
CalculateSynergy(method = m) %>% #, correction = TRUE
tibble(BlockID = .$drug.pairs %>% simplify() %>% .[4],
method = .$method,
score_average = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% mean(),
score_sd = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% sd()) %>%
select(BlockID, method, score_average, score_sd) %>% distinct(),
#              error=function(e)
#             NULL)
)
}
) %>% bind_rows()
#PlotSynergy(type = "all")
#hacky way of ignoring cases in which the synergy scores could not be calculated
return(
#tryCatch(
f %>%
ReshapeData(., data.type = "viability") %>%
#PlotDoseResponse() %>%
CalculateSynergy(method = m) %>% #, correction = TRUE
tibble(BlockID = .$drug.pairs %>% simplify() %>% .[4],
method = .$method,
score_average = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% mean(),
score_sd = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% sd()) %>%
select(BlockID, method, score_average, score_sd) %>% distinct()#,
#              error=function(e)
#             NULL)
)
lapply(as.list(me), function(m, f = df){
#hacky way of ignoring cases in which the synergy scores could not be calculated
return(
#tryCatch(
f %>%
ReshapeData(., data.type = "viability") %>%
#PlotDoseResponse() %>%
CalculateSynergy(method = m) %>% #, correction = TRUE
tibble(BlockID = .$drug.pairs %>% simplify() %>% .[4],
method = .$method,
score_average = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% mean(),
score_sd = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% sd()) %>%
select(BlockID, method, score_average, score_sd) %>% distinct()#,
#              error=function(e)
#             NULL)
)
}
) %>% bind_rows()
f
f <- syn_table %>% filter(block_id == "Everolimus_AZD5363", line == "D013T01", replicate == 1) %>% dplyr::select(-replicate)
f <- syn_table %>% filter(block_id == "Everolimus_AZD5363", line == "D013T01", replicate == 1) %>%
ungroup() %>%
dplyr::select(-replicate)
# toruble shooting
me = c("ZIP", "HSA", "Bliss", "Loewe")
m = me[1]
f
f <- syn_table %>% filter(block_id == "Everolimus_AZD5363", line == "D013T01", replicate == 1) %>%
ungroup() %>%
dplyr::select(-replicate)
f <- syn_table %>% filter(block_id == "Everolimus_AZD5363", line == "D013T01", replicate == 1) %>%
ungroup() %>%
dplyr::select(-replicate)
# toruble shooting
me = c("ZIP", "HSA", "Bliss", "Loewe")
m = me[1]
f
lapply(as.list(me), function(m, f = df){
#hacky way of ignoring cases in which the synergy scores could not be calculated
return(
#tryCatch(
f %>%
ReshapeData(., data.type = "viability") %>%
#PlotDoseResponse() %>%
CalculateSynergy(method = m) %>% #, correction = TRUE
tibble(BlockID = .$drug.pairs %>% simplify() %>% .[4],
method = .$method,
score_average = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% mean(),
score_sd = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% sd()) %>%
select(BlockID, method, score_average, score_sd) %>% distinct()#,
#              error=function(e)
#             NULL)
)
}
) %>% bind_rows()
f %>%
ReshapeData(., data.type = "viability")
f %>%
ReshapeData(., data.type = "viability") %>%
#PlotDoseResponse() %>%
CalculateSynergy(method = m)
f %>%
ReshapeData(., data.type = "viability") %>%
#PlotDoseResponse() %>%
CalculateSynergy(method = m) %>% #, correction = TRUE
tibble(BlockID = .$drug.pairs %>% simplify() %>% .[4],
method = .$method,
score_average = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% mean(),
score_sd = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% sd()) %>%
select(BlockID, method, score_average, score_sd) %>% distinct()
f %>%
+     ReshapeData(., data.type = "viability") %>%
+     #PlotDoseResponse() %>%
+     CalculateSynergy(method = m) %>% #, correction = TRUE
+     tibble(BlockID = .$drug.pairs %>% simplify() %>% .[4],
+            method = .$method,
+            score_average = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% mean(),
+            score_sd = .$scores %>% .[[1]] %>% .[-1,-1] %>% simplify() %>% sd()) %>%
+     select(BlockID, method, score_average, score_sd) %>% distinct()
